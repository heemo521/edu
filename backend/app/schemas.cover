    1: """Pydantic schemas for AI Tutoring MVP.
       
       Defines request and response models used by the API endpoints.
       """
       
    1: from pydantic import BaseModel, constr
       
       
    2: class UserBase(BaseModel):
    1:     username: constr(min_length=3, max_length=50)
    1:     role: str = "student"
       
       
    2: class UserCreate(UserBase):
    1:     password: constr(min_length=4, max_length=128)
       
       
    2: class UserOut(UserBase):
    1:     id: int
       
    2:     class Config:
               # Pydantic v2 uses 'from_attributes' instead of 'orm_mode'
    1:         from_attributes = True
       
       
    2: class Token(BaseModel):
    1:     access_token: str
    1:     token_type: str
       
       
    2: class LoginRequest(BaseModel):
    1:     username: str
    1:     password: str
       
       
    2: class ChatRequest(BaseModel):
    1:     """Request model for chat messages sent to the AI tutor."""
    1:     user_id: int
    1:     message: str
       
       
    2: class ChatResponse(BaseModel):
    1:     """Response model for chat replies from the AI tutor."""
    1:     response: str
       
       
    2: class HistoryItem(BaseModel):
    1:     """Item representing a chat history entry."""
    1:     message: str
    1:     response: str
    1:     timestamp: str
       
       
    2: class SubscriptionRequest(BaseModel):
    1:     """Request model for managing a user's subscription status."""
    1:     user_id: int
    1:     action: str = "activate"  # 'activate' or 'cancel'
       
       
    2: class SubscriptionStatus(BaseModel):
    1:     """Response model for a user's subscription status."""
    1:     user_id: int
    1:     status: str
    1:     start_date: str | None = None
    1:     end_date: str | None = None

    1: """Unit tests for progress and leveling features.
       
       These tests verify that the XP/level system and streak counting behave as expected.
       The tests use FastAPI's TestClient for endpoint-level checks and call the
       progress.update_progress function directly for more granular control over dates.
       """
       
    1: import os
    1: import unittest
    1: import sqlite3
       
    1: from fastapi.testclient import TestClient
       
    1: from ai_tutoring_mvp.backend.app.main import app
    1: from ai_tutoring_mvp.backend.app import database, progress
       
       
    2: class ProgressTestCase(unittest.TestCase):
    1:     """Test suite for XP/level and streak progress functionality."""
       
    1:     def setUp(self):
               # Remove existing database to ensure a clean state
    2:         db_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'ai_tutoring.db')
    2:         db_path = os.path.abspath(db_path)
    2:         if os.path.exists(db_path):
    2:             os.remove(db_path)
               # Initialize a fresh DB
    2:         database.init_db()
    2:         self.client = TestClient(app)
       
    1:     def test_xp_and_level_increment(self):
               """Ensure that XP accumulates and the user levels up when passing thresholds."""
               # Register a new user
    1:         res = self.client.post('/register', json={'username': 'lev', 'password': '1234', 'role': 'student'})
    1:         user_id = res.json()['id']
               # Each chat grants default 10 XP. After 15 chats, XP should be 150.
               # According to XP_THRESHOLDS [0,100,250,...], 150 XP corresponds to level 1.
   16:         for _ in range(15):
   15:             self.client.post('/chat', json={'user_id': user_id, 'message': 'dummy'})
               # Fetch dashboard to verify XP and level
    1:         dash = self.client.get(f'/dashboard/{user_id}').json()
    1:         self.assertGreaterEqual(dash['xp'], 150)
    1:         self.assertEqual(dash['level'], 1)
               # A few more chats to cross the next threshold (250 XP -> level 2)
   16:         for _ in range(15):
   15:             self.client.post('/chat', json={'user_id': user_id, 'message': 'dummy2'})
    1:         dash2 = self.client.get(f'/dashboard/{user_id}').json()
               # After 30 chats total, XP >= 300, level should be >= 2
    1:         self.assertGreaterEqual(dash2['xp'], 300)
    1:         self.assertGreaterEqual(dash2['level'], 2)
       
    1:     def test_streak_counting(self):
               """Verify that streaks increment on consecutive days and reset after a gap."""
               # Manually open a new SQLite connection for direct progress updates
               # Use the same database file as the application. Setting row_factory ensures
               # we can access columns by name.
    1:         db_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'ai_tutoring.db')
    1:         db_path = os.path.abspath(db_path)
    1:         conn = sqlite3.connect(db_path)
    1:         conn.row_factory = sqlite3.Row
               # Register user via API to ensure row exists
    1:         res = self.client.post('/register', json={'username': 'streaker', 'password': 'pass', 'role': 'student'})
    1:         user_id = res.json()['id']
               # On day 1, perform a progress update
    1:         progress.update_progress(user_id, conn, xp_gain=5, current_date='2025-08-01')
               # On day 2 (consecutive), streak should increment
    1:         progress.update_progress(user_id, conn, xp_gain=5, current_date='2025-08-02')
    1:         cur = conn.cursor()
    1:         cur.execute('SELECT streak_count FROM users WHERE id = ?', (user_id,))
    1:         row = cur.fetchone()
    1:         self.assertEqual(row['streak_count'], 2)
               # Skip a day and update on day 4; streak should reset to 1
    1:         progress.update_progress(user_id, conn, xp_gain=5, current_date='2025-08-04')
    1:         cur.execute('SELECT streak_count FROM users WHERE id = ?', (user_id,))
    1:         row2 = cur.fetchone()
    1:         self.assertEqual(row2['streak_count'], 1)
    1:         conn.close()
       
       
    1: if __name__ == '__main__':
           unittest.main()
